"use strict";(self.webpackChunkwebsite_next=self.webpackChunkwebsite_next||[]).push([[13233],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>h});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(r),m=a,h=c["".concat(s,".").concat(m)]||c[m]||u[m]||o;return r?n.createElement(h,i(i({ref:t},d),{},{components:r})):n.createElement(h,i({ref:t},d))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},62474:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=r(87462),a=(r(67294),r(3905));const o={id:"deploy-monitoring",title:"Monitoring",sidebar_label:"Monitoring",original_id:"deploy-monitoring"},i=void 0,l={unversionedId:"deploy-monitoring",id:"version-2.3.0/deploy-monitoring",title:"Monitoring",description:"There are different ways to monitor a Pulsar cluster, exposing both metrics relative to the usage of topics and the overall health of the individual components of the cluster.",source:"@site/versioned_docs/version-2.3.0/deploy-monitoring.md",sourceDirName:".",slug:"/deploy-monitoring",permalink:"/docs/2.3.0/deploy-monitoring",draft:!1,editUrl:"https://github.com/apache/pulsar-site/edit/main/versioned_docs/version-2.3.0/deploy-monitoring.md",tags:[],version:"2.3.0",frontMatter:{id:"deploy-monitoring",title:"Monitoring",sidebar_label:"Monitoring",original_id:"deploy-monitoring"},sidebar:"version-2.3.0/docsSidebar",previous:{title:"Bare metal multi-cluster",permalink:"/docs/2.3.0/deploy-bare-metal-multi-cluster"},next:{title:"ZooKeeper and BookKeeper",permalink:"/docs/2.3.0/administration-zk-bk"}},s={},p=[{value:"Collecting metrics",id:"collecting-metrics",level:2},{value:"Broker stats",id:"broker-stats",level:3},{value:"ZooKeeper stats",id:"zookeeper-stats",level:3},{value:"BookKeeper stats",id:"bookkeeper-stats",level:3},{value:"Configuring Prometheus",id:"configuring-prometheus",level:2},{value:"Dashboards",id:"dashboards",level:2},{value:"Pulsar per-topic dashboard",id:"pulsar-per-topic-dashboard",level:3},{value:"Grafana",id:"grafana",level:3}],d={toc:p},c="wrapper";function u(e){let{components:t,...r}=e;return(0,a.kt)(c,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"There are different ways to monitor a Pulsar cluster, exposing both metrics relative to the usage of topics and the overall health of the individual components of the cluster."),(0,a.kt)("h2",{id:"collecting-metrics"},"Collecting metrics"),(0,a.kt)("h3",{id:"broker-stats"},"Broker stats"),(0,a.kt)("p",null,"Pulsar broker metrics can be collected from brokers and exported in JSON format. There are two main types of metrics:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("em",{parentName:"p"},"Destination dumps"),", which containing stats for each individual topic. They can be fetched using"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"\nbin/pulsar-admin broker-stats destinations\n\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Broker metrics, containing broker info and topics stats aggregated at namespace\nlevel:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"\nbin/pulsar-admin broker-stats monitoring-metrics\n\n")))),(0,a.kt)("p",null,"All the message rates are updated every 1min."),(0,a.kt)("p",null,"The aggregated broker metrics are also exposed in the ",(0,a.kt)("a",{parentName:"p",href:"https://prometheus.io"},"Prometheus")," format at:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"\nhttp://$BROKER_ADDRESS:8080/metrics/\n\n")),(0,a.kt)("h3",{id:"zookeeper-stats"},"ZooKeeper stats"),(0,a.kt)("p",null,"The local Zookeeper/configuration store server and clients that are shipped with Pulsar have been instrumented to expose\ndetailed stats through Prometheus as well."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"\nhttp://$LOCAL_ZK_SERVER:8000/metrics\nhttp://$GLOBAL_ZK_SERVER:8001/metrics\n\n")),(0,a.kt)("p",null,"The default port of local ZooKeeper is ",(0,a.kt)("inlineCode",{parentName:"p"},"8000")," and that of configuration store is ",(0,a.kt)("inlineCode",{parentName:"p"},"8001"),".\nThese can be changed by specifying system property ",(0,a.kt)("inlineCode",{parentName:"p"},"stats_server_port"),"."),(0,a.kt)("h3",{id:"bookkeeper-stats"},"BookKeeper stats"),(0,a.kt)("p",null,"For BookKeeper you can configure the stats frameworks by changing the ",(0,a.kt)("inlineCode",{parentName:"p"},"statsProviderClass")," in\n",(0,a.kt)("inlineCode",{parentName:"p"},"conf/bookkeeper.conf"),"."),(0,a.kt)("p",null,"By default, the default BookKeeper configuration included with Pulsar distribution will enable\nthe Prometheus exporter."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"\nhttp://$BOOKIE_ADDRESS:8000/metrics\n\n")),(0,a.kt)("p",null,"For bookies, the default port is ",(0,a.kt)("inlineCode",{parentName:"p"},"8000")," (instead of ",(0,a.kt)("inlineCode",{parentName:"p"},"8080"),") and that can be configured by changing\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"prometheusStatsHttpPort")," in ",(0,a.kt)("inlineCode",{parentName:"p"},"conf/bookkeeper.conf"),"."),(0,a.kt)("h2",{id:"configuring-prometheus"},"Configuring Prometheus"),(0,a.kt)("p",null,"You can configure Prometheus to collect and store the metrics data by following the Prometheus ",(0,a.kt)("a",{parentName:"p",href:"https://prometheus.io/docs/introduction/getting_started/"},"Getting started")," guide."),(0,a.kt)("p",null,"When running on bare metal, you can provide the list of nodes that needs to be probed. When deploying\nin a Kubernetes cluster, the monitoring is automatically setup with the ",(0,a.kt)("a",{parentName:"p",href:"/docs/2.3.0/deploy-kubernetes"},"provided"),"\ninstructions."),(0,a.kt)("h2",{id:"dashboards"},"Dashboards"),(0,a.kt)("p",null,"When collecting time series statistics, the major problem is to make sure the number of dimensions\nattached to the data does not explode."),(0,a.kt)("p",null,"For that reason we only collect time series of metrics aggregated at the namespace level."),(0,a.kt)("h3",{id:"pulsar-per-topic-dashboard"},"Pulsar per-topic dashboard"),(0,a.kt)("p",null,"The per-topic dashboard instructions are available at ",(0,a.kt)("a",{parentName:"p",href:"/docs/2.3.0/administration-dashboard"},"Dashboard"),"."),(0,a.kt)("h3",{id:"grafana"},"Grafana"),(0,a.kt)("p",null,"You can use grafana to easily create dashboard driven by the data stored in Prometheus."),(0,a.kt)("p",null,"There is a ",(0,a.kt)("inlineCode",{parentName:"p"},"pulsar-grafana")," Docker image that is ready to use with the principal dashboards already\nin place. This is enabled by default when deploying Pulsar on Kubernetes."),(0,a.kt)("p",null,"To use the dashboard manually:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"\ndocker run -p3000:3000 \\\n        -e PROMETHEUS_URL=http://$PROMETHEUS_HOST:9090/ \\\n        apachepulsar/pulsar-grafana:latest\n\n")))}u.isMDXComponent=!0}}]);